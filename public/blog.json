[
  {
    "author": "Good Hartman",
    "question": "How will you improve the performance of a React Application?",
    "short_description": "In React applications, we are guaranteed a very fast UI by default. However, as an application grows, developers may encounter some performance issues.Optimizing application performance is key for developers who are mindful of keeping a user’s experience positive to keep them on an app and engaged.",
    "tags": [
      "react",
      "react-app",
      "javascript",
      "react@18",
      "happy-coding"
    ],
    "detail": [
      {
        "id": 0,
        "title": "Understanding how React updates its UI",
        "description": "React uses the concept of a virtual DOM to minimize the performance cost of re-rendering a webpage because the actual DOM is expensive to manipulate.This is great because it speeds up the UI render time. However, this concept can also slow down a complex app if it’s not managed very well.The issue comes when the child components are not affected by the state change. In other words, they do not receive any prop from the parent component."
      },
      {
        "id": 1,
        "title": "Profiling the React app to understand where bottlenecks are",
        "description": "The profiler records how long it takes a component to render, why a component is rendering, and more. From there, we can investigate the affected component and provide the necessary optimization."
      },
      {
        "id": 2,
        "title": "Keeping component state local where necessary",
        "description": "We’ve learned that a state update in a parent component re-renders the parent and its child components.So, to ensure re-rendering a component only happens when necessary, we can extract the part of code that cares about the component state, making it local to that part of the code."
      },
      {
        "id": 3,
        "title": "Memoizing React components to prevent unnecessary re-renders",
        "description": "Unlike the previous performance technique where refactoring our code gives us a performance boost, here we trade memory space for time. So, we must only memoize a component when necessary."
      },
      {
        "id": 4,
        "title": "Code-splitting in React using dynamic import()",
        "description": "Code-splitting is another important optimization technique for a React application. By default, when a React application renders in a browser, a “bundle” file containing the entire application code loads and serves to users at once. This file generates by merging all the code files needed to make a web application work."
      },
      {
        "id": 5,
        "title": "Windowing or list virtualization in React applications",
        "description": "Imagine we have an application where we render several rows of items on a page. Whether or not any of the items display in the browser viewport, they render in the DOM and may affect the performance of our application."
      },
      {
        "id": 6,
        "title": " Lazy loading images in React",
        "description": "To optimize an application that consists of several images, we can avoid rendering all of the images at once to improve the page load time. With lazy loading, we can wait until each of the images is about to appear in the viewport before we render them in the DOM."
      }
    ]
  },

  {
    "author": "Annmarie Petersen",
    "question": "What are the different ways to manage a state in a React application?",
    "short_description": "Not only are there are a lot of different kinds of state, but there often dozens of ways of managing each kind. Which should you choose?Managing state in your React apps isn’t as simple as using useState or useReducer.",
    "tags": [
      "react",
      "javascript",
      "manage-state",
      "es6",
      "happy-coding"
    ],
    "detail": [
      {
        "id": 0,
        "title": "Local (UI) state",
        "description": "Local state is data we manage in one or another component.Local state is most often managed in React using the useState hook.For example, local state would be needed to show or hide a modal component or to track values for a form component, such as form submission, when the form is disabled and the values of a form’s inputs."
      },
      {
        "id": 1,
        "title": "Global (UI) state",
        "description": "Global state is data we manage across multiple components.Global state is necessary when we want to get and update data anywhere in our app, or in multiple components at least."
      },
      {
        "id": 2,
        "title": "Server state",
        "description": "Data that comes from an external server that must be integrated with our UI state.Server state is a simple concept, but can be hard to manage alongside all of our local and global UI state."
      },
      {
        "id": 3,
        "title": "URL state",
        "description": "URL state is often missing as a category of state, but it is an important one.In many cases, a lot of major parts of our application rely upon accessing URL state. Try to imagine building a blog without being able to fetch a post based off of its slug or id that is located in the URL"
      }
      
    ]
  },
  {
    "author": "Arafat",
    "question": "How does prototypical inheritance work?",
    "short_description": "JavaScript is the most common of the prototype-capable languages, and its capabilities are relatively unique. When used appropriately, prototypical inheritance in JavaScript is a powerful tool that can save hours of coding.",
    "tags": [
      "react",
      "javascript",
      "inheritance",
      "es6",
      "happy-coding"
    ],
    "detail": [
      {
        "id": 0,
        "title": "What is prototypical inheritance?",
        "description": "Simply put, prototypical inheritance refers to the ability to access object properties from another object. We use a JavaScript prototype to add new properties and methods to an existing object constructor. We can then essentially tell our JS code to inherit properties from a prototype. Prototypical inheritance allows us to reuse the properties or methods from one JavaScript object to another through a reference pointer function."
      },
      {
        "id": 1,
        "title": "Inheritance cannot flow in circles as this will create an error.",
        "description": "For example, if user linked premiumFamily as a prototype in the above program, an error would occur as this would create a loop."
      },
      {
        "id": 2,
        "title": "Objects cannot inherit from multiple prototypes.",
        "description": "As we saw above, they can inherit multiple object’s properties through a chain, however another object linked as a prototype explicitly will cause an error. This is the case even if the additional prototype is within the same chain. For example, familyPremium could not have explicit links to both premiumUser and user."
      },
      {
        "id": 2,
        "title": "Prototypical relationships can only be made to objects.",
        "description": "This is because the __proto__ function works as a forwarder, directing the program where to find the value it is looking for. As the program either knows where to look or it doesn’t, the function can be only either null or an object. All other types will be discarded."
      }
    ]
  },
  {
    "author": "anis",
    "question": "Why you do not set the state directly in React. For example, if you have const [products, setProducts] = useState([]). Why you do not set products = [...] instead, you use the setProducts",
    "short_description": "A Hook is a special function that lets you “hook into” React features. For example, useState is a Hook that lets you add React state to function components.f you write a function component and realize you need to add some state to it, previously you had to convert it to a class. Now you can use a Hook inside the existing function component. We’re going to do that right now!",
    "tags": [
      "react",
      "hooks",
      "react-hooks",
      "useState",
      "useEffect"
    ],
    "detail": [
      {
        "id": 0,
        "title": "What does calling useState do?",
        "description": "It declares a “state variable”. Our variable is called count but we could call it anything else, like banana. This is a way to “preserve” some values between the function calls — useState is a new way to use the exact same capabilities that this.state provides in a class. Normally, variables “disappear” when the function exits but state variables are preserved by React."
      },
      {
        "id": 1,
        "title": "What do we pass to useState as an argument?",
        "description": "The only argument to the useState() Hook is the initial state. Unlike with classes, the state doesn’t have to be an object. We can keep a number or a string if that’s all we need. In our example, we just want a number for how many times the user clicked, so pass 0 as initial state for our variable. (If we wanted to store two different values in state, we would call useState() twice.)"
      },
      {
        "id": 2,
        "title": "What does useState return?",
        "description": "It returns a pair of values: the current state and a function that updates it. This is why we write const [count, setCount] = useState(). This is similar to this.state.count and this.setState in a class, except you get them in a pair. If you’re not familiar with the syntax we used, "
      }
    ]
  },
  {
    "author": "Anik",
    "question": "What is a unit test? Why should write unit tests?",
    "short_description": "The main objective of unit testing is to isolate written code to test and determine if it works as intended.Unit testing is an important step in the development process, because if done correctly, it can help detect early flaws in code which may be more difficult to find in later testing stages.",
   "tags": [
      "tests",
      "unit-text",
      "programming",
      "react",
      "es6"
    ],
    "detail": [
      {
        "id": 0,
        "title": "How unit tests work",
        "description": "A unit test typically comprises of three stages: plan, cases and scripting and the unit test itself. In the first step, the unit test is prepared and reviewed. The next step is for the test cases and scripts to be made, then the code is tested."
      },
      {
        "id": 1,
        "title": "Types of unit testing",
        "description": "Unit tests can be performed manually or automated. Those employing a manual method may have an instinctual document made detailing each step in the process; however, automated testing is the more common method to unit tests. Automated approaches commonly use a testing framework to develop test cases. These frameworks are also set to flag and report any failed test cases while also providing a summary of test cases."
      },
      {
        "id": 2,
        "title": "esse do ad sit occaecat do exercitation sit dolore duis",
        "description": "Reprehenderit cillum elit quis mollit reprehenderit. Ipsum proident in nisi exercitation sint amet fugiat Lorem commodo laborum irure dolore excepteur duis. Cupidatat in tempor enim enim anim sit Lorem occaecat quis ipsum duis.\r\n"
      }
    ]
  }
]